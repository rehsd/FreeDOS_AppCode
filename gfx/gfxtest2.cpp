#include <iostream>
#include <stdint.h>				// uint16_t
#include <conio.h>				// x86 in/out operations
#include <i86.h>				// interrupts
#include <time.h>
#include "gfxlib.cpp"

#define TEST_WIDTH							64
#define TEST_HEIGTH							64

using namespace std;

//extern "C" uint16_t __cdecl add2Nums(uint16_t num1, uint16_t num2);


// sprite data
int met1[32][32] = {
{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0800,0x98E0,0xFB43,0xF4C7,0xF4C7,0xFD48,0xB3A6,0x0860,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0xA120,0xF9C0,0xF1E0,0xF1A0,0xF2E3,0xFCC7,0xFCC7,0xBB65,0x0800,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x9900,0xF180,0xF384,0xF364,0xE980,0xE201,0xEA01,0xF200,0xB940,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x1000,0x98C0,0xFBE5,0xFB83,0x9245,0x1C0F,0x1BEF,0x5B6A,0xD140,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x88E0,0xC960,0x5040,0x8B05,0xFBC4,0x80A0,0x01E8,0x04B2,0x0451,0x230B,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0xA920,0xC960,0xC365,0xF466,0xFCA6,0x4101,0x6A64,0xFD68,0xE2C3,0x7060,0x01E8,0x04D3,0x03AE,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0800,0xA920,0x6060,0x5040,0x5121,0xD467,0xFD89,0xC447,0x51A2,0x8B05,0xFD88,0xE303,0x68C0,0x21A5,0x8A04,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x48A0,0x028A,0x02EC,0x02CB,0x3983,0xD3E5,0xFDA9,0xBBE6,0x51E3,0x8A63,0xFB02,0xA900,0x3000,0xE140,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x68C0,0x82A7,0x0208,0x01C8,0x0229,0x4205,0xC3E6,0xFE0A,0xBB04,0x5800,0x5840,0x68A0,0x88C0,0x58C0,0x8AC4,0x7A84,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x1000,0xF9E0,0xFAE2,0x8A22,0x8222,0x2247,0x0021,0x91A1,0xFBC4,0xFB84,0xC2C4,0x6264,0x71E2,0x8100,0x7AC4,0xFD89,0xFD28,0x70A0,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0800,0x8900,0xFD08,0xFD89,0xBD4B,0x2A47,0x01E7,0x5102,0x9020,0xC2C3,0xFDEA,0xFD48,0xA243,0x2101,0xFDC9,0xF4E8,0xF364,0xFB03,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x92E4,0xFD08,0x2C6F,0x04B3,0x038E,0x01A7,0x0186,0x6AA6,0xFC46,0xFB23,0xA0A0,0x18A1,0xAB65,0xF3A4,0xF303,0xFD48,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x9AE4,0x2C8F,0x03AE,0x0124,0x02EB,0x0431,0x7246,0xF920,0xF9A0,0xA940,0x0800,0x6040,0xFA00,0xFC46,0xB3A6,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x02AA,0x00A2,0x02AA,0x0513,0x0166,0x70A0,0xFAC2,0xEA21,0x78C0,0x2020,0xD160,0xC960,0xA920,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x1800,0x2020,0x0269,0x0492,0x01E8,0x7223,0xED08,0x82A4,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0xB940,0xF1C0,0x5860,0x1269,0x1491,0x9328,0x98C0,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0xC160,0xF9E0,0xE980,0xE160,0xE3C6,0xF3C5,0x88C0,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0xB940,0xF9C0,0xF1C0,0xF160,0xFB64,0xFD08,0xECC7,0x8AC4,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x1820,0xB940,0xF1C0,0xF1A0,0xF200,0xF221,0xFBA4,0xED08,0xCC67,0x9B25,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0xA920,0xF9C0,0xF9C0,0xF9A0,0xF980,0xFA00,0xF282,0xFAA2,0xEAE3,0xBC06,0xA345,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0xB140,0xF9E0,0x78E0,0x3860,0x4060,0x90E0,0xF9C0,0xF960,0xF261,0xFDC9,0xDCA8,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0xB140,0xF9E0,0xB120,0x3020,0x0000,0x1820,0x50A0,0x78A0,0xF1C0,0xFAE2,0xE2A2,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0xA920,0xF9A0,0xFB23,0x71C2,0x0000,0x0000,0x0800,0x99A1,0xFBC5,0xEB03,0x5860,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x5080,0xD140,0xF160,0xFC86,0x7AC5,0x0000,0x2000,0xA8C0,0xFB23,0xED49,0x6244,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x4880,0xE160,0xFAC2,0xFA41,0xC2A3,0x3142,0x20E1,0xAAE4,0xFAC2,0xE241,0x6A23,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x4060,0xE980,0xFAC2,0xFD28,0xC2C3,0x3000,0x1800,0xAA62,0xFC86,0xDB03,0x6860,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x3860,0x3840,0x4040,0xF1A0,0xF9C0,0xC365,0xB406,0x3102,0x0000,0x9100,0xF9C0,0xFA00,0x9161,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0xF9C0,0xFA81,0xFA81,0xC980,0xC160,0x2000,0x0000,0x0000,0x0000,0x68C0,0xE160,0xFB64,0xB3E6,0x1880,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0xF1E0,0xF466,0xCC06,0x1060,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x6060,0xEB03,0xFDA9,0xC3E6,0x1880,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0xF9C0,0xE1E0,0x28A0,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x61E3,0xE4E8,0xE4C8,0xA345,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0xE9E0,0xF4A7,0xDC87,0x20A1,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0840,0x1040,0x0840,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x2060,0xECC8,0xFD28,0xE4A7,0x20A1,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000}
};
int met2[32][32] = {
{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0xB940,0xDBE6,0xDC87,0xDC67,0xDCC8,0x7243,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x1000,0xB940,0xF1C0,0xFA21,0xF221,0xFC26,0xFD69,0xE508,0x7284,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x1020,0xF9C0,0xF9C0,0xF3A4,0xF241,0xF9E0,0xFA61,0xFA81,0xF220,0x78E0,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x4860,0xE9A0,0xFD08,0xFAC2,0x82A7,0x4B8C,0x434B,0xA2A6,0xC900,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0800,0x9100,0x0000,0x3820,0x4942,0xE1C0,0x4964,0x034E,0x04F3,0x1C2F,0x4A27,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x2840,0x9100,0x70E0,0x92E4,0x8B05,0x8AE4,0x60E0,0x8860,0x4123,0x030D,0x0514,0x032D,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x2020,0x80C0,0x70E0,0x9283,0x92A3,0x92A3,0x7AA4,0x7981,0x8860,0x4143,0x2ACA,0x5A26,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0800,0x70A0,0x90E0,0x0145,0x0167,0x0187,0x6AE6,0x71A2,0x88E0,0x4860,0x6040,0xD940,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x2020,0x50A0,0x68A0,0x9120,0x01A6,0x0491,0x43ED,0x538C,0x40C2,0x8880,0x4060,0x2040,0x88E0,0x7880,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x68C0,0xFA20,0xC120,0x0083,0x0471,0x030C,0xE9C0,0xFA20,0xFAA2,0x81C2,0x1040,0x6080,0x7941,0x0104,0x0124,0x00E3,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x4880,0xD9A0,0xC120,0x00A2,0x334B,0x3060,0xA100,0xF487,0xFD48,0xDD4A,0x52A6,0x0041,0x0186,0x04B2,0x0491,0x03EF,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x4880,0xA120,0x2020,0xF9A0,0xF1A0,0x3040,0xA345,0xF508,0x5C8D,0x0492,0x01E7,0x0145,0x04B2,0x0450,0x032C,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x2040,0xF1A0,0xF9C0,0xE9A0,0x3820,0xAB24,0x548E,0x04B3,0x0207,0x0104,0x0450,0x030B,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x2020,0xF1A0,0xF1C0,0xF1E0,0xE9C0,0x4880,0x02AA,0x0492,0x0208,0x0000,0x0020,0x0020,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x2040,0xF1A0,0xF1C0,0xF446,0xFCA7,0xE4A7,0x41A3,0x0061,0x0020,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x2840,0xD980,0xF1A0,0xF1C0,0xF241,0xF241,0xFA81,0x50A0,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x3860,0xF9C0,0xF1A0,0xF1A0,0xF180,0xF3C5,0xF261,0xD160,0x4860,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x3860,0xF9E0,0xF1A0,0xF1A0,0xF180,0xF487,0xF2C2,0xF960,0xDB03,0x5A03,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x1000,0x68C0,0xF1A0,0xF1C0,0xF384,0xFD48,0xFAA2,0xE920,0xFC46,0x82E5,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x58A0,0x9120,0x3840,0x0000,0x0000,0x0000,0x0000,0xF1A0,0xF1A0,0xF4C7,0x72A4,0xD1A0,0xF9A0,0xF262,0xCB44,0x59E3,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x5840,0xD940,0xF9C0,0xC262,0x4182,0x0000,0x1820,0x9100,0xF1C0,0xFB64,0xFD28,0x18A1,0x4040,0xC980,0xF140,0xFBC4,0x9B86,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
{0x0000,0x0000,0x0000,0x0000,0x0000,0x59C3,0xE303,0xFBA4,0xFA41,0xFBE5,0xCBE6,0x3840,0x2040,0xF9C0,0xF220,0xF528,0x9325,0x1860,0x0000,0xA120,0xF9C0,0xF2A2,0xC344,0x49A2,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
{0x0000,0x0000,0x0000,0x0000,0x0000,0xDC67,0xFDC9,0xBC27,0x91C1,0xCA62,0xFB43,0xC120,0x70C0,0xF1A0,0xF9C0,0xFB84,0x0820,0x0000,0x0000,0x60A0,0xC980,0xF140,0xFB43,0xBC27,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
{0x0000,0x0000,0x0000,0x0000,0x0000,0xDC67,0xC427,0x28C1,0x0000,0x4060,0xD160,0xF9E0,0xF9A0,0xF1C0,0xEA82,0xA100,0x1000,0x0000,0x0000,0x0000,0x78A0,0xF980,0xFAA2,0xB304,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
{0x0000,0x0000,0x0000,0x0000,0x0000,0xA345,0x20C1,0x0000,0x0000,0x0000,0x4060,0xD180,0xF9E0,0xFB43,0xECC8,0x0020,0x0000,0x0000,0x0000,0x2020,0xA181,0xFAE2,0xEA21,0x78A0,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x3020,0xCA21,0xCC47,0xB3A6,0x0820,0x0000,0x0000,0x1820,0xB100,0xFBE5,0xED49,0x7284,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x1800,0xB920,0xF9A0,0xEB84,0x6A84,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0xB9A0,0xFA20,0xE9C0,0x60C0,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0xCBC6,0xFD28,0x59A2,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0xB960,0xF220,0xFA41,0x48A0,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0800,0xE180,0xF980,0xF384,0xDCA7,0x51A2,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x2020,0xC940,0xF446,0xFD69,0xE4E8,0x6A23,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000}
};
int met3[32][32] = {
{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x5880,0xFA61,0xF4C7,0xF4C7,0xF4E8,0xFD48,0x7264,0x0020,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x70C0,0xF1C0,0xF1C0,0xF1E0,0xF1E0,0xF466,0xF4E8,0xF508,0x8AA4,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x78E0,0xF9C0,0xF261,0xF446,0xF1C0,0xF1E0,0xFA00,0xFA20,0xF1E0,0x9100,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0800,0x70A0,0xFAA2,0xFCC7,0xF1E0,0x536B,0x33AD,0x33AD,0x9AC6,0xD100,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x4820,0x8080,0x6981,0xFCA7,0xF1A0,0x0924,0x03AF,0x04D3,0x1C0F,0x4267,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x70A0,0x9A63,0xE406,0xA222,0x0061,0xFD48,0xF3A4,0x98C0,0x10E4,0x036D,0x0514,0x034D,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x70C0,0x90A0,0x9A22,0x9304,0x82A4,0x7264,0x82A4,0xFD49,0xFC05,0x9900,0x2124,0x2AEA,0x5246,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0xA120,0x0944,0x0146,0x0125,0x3A05,0xAB24,0x4982,0x9305,0xF426,0xFAC1,0x5840,0x6040,0xD940,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x2020,0x330A,0x0BAE,0x038E,0x024A,0x2164,0xC3C6,0x3020,0x98A0,0xB120,0x60A0,0x70C0,0x9100,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0xE9A0,0xFA20,0x6900,0x2080,0x19C6,0x030C,0x1000,0xEA01,0x40E1,0x10A1,0x9140,0x88E0,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0xD160,0xFC26,0xF508,0xED08,0x9326,0x0041,0x1081,0xDC47,0xE4A7,0xECE8,0x6A03,0x0000,0x0800,0x0820,0x0820,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x1000,0xC3E6,0xFD48,0x8CCC,0x1410,0x03CF,0x038D,0x10A1,0x1860,0xC9C0,0x60E0,0x4040,0xE261,0xDCA7,0xDC67,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x18A1,0xCBC5,0x8CED,0x0472,0x03AE,0x00C3,0x030C,0x038E,0xC243,0x6860,0x5040,0xFAC2,0xFD69,0xFD48,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x28C0,0x1B2B,0x036E,0x0144,0x030B,0x0451,0x01E7,0x30C1,0x1800,0x60A0,0xFA40,0xEA82,0x4162,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x4143,0x6183,0x0062,0x04F3,0x0450,0x0000,0x0000,0x0000,0x2840,0x60A0,0x4840,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x4880,0xC940,0xE140,0x50E1,0x0208,0x0451,0x02CB,0x00A2,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0xA920,0xF9E0,0xF9C0,0xE1C0,0x59A2,0x5AE9,0x030C,0x00C3,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0xA120,0xF9E0,0xF180,0xF282,0xFD28,0xFA81,0x6060,0x0800,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x80E0,0xE1A0,0xF180,0xF261,0xF508,0xF508,0xFA61,0x6080,0x0800,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x78C0,0xF9A0,0xF261,0xF508,0xFD08,0xF241,0xF9A0,0x68A0,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x70C0,0xF9A0,0xF261,0xF508,0xF4E8,0xF221,0xF9C0,0x68C0,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x70C0,0xF9A0,0xF281,0xDCA8,0x28E1,0xC960,0xF9E0,0x68C0,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x70E0,0xF9A0,0xF9C0,0xD201,0x0000,0xD980,0x78E0,0x1020,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x6880,0xFA81,0xFC05,0xDB44,0x0820,0x4880,0x1000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x5080,0xB920,0xF303,0xFDCA,0xF508,0x0840,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0xA120,0xF9C0,0xFA61,0xEBA5,0x82A4,0x0020,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x3040,0xB920,0xF9C0,0xE180,0x7880,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0xC201,0xFAA2,0xDA00,0x70C0,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x1820,0xC3A5,0xFD28,0x7223,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0xD980,0xF1C0,0xFA00,0x7900,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0xE1A0,0xF180,0xF384,0xED08,0x8AC4,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000},
{0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x2020,0xC120,0xF3E5,0xFD69,0xF508,0xA345,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000}
};


Graphics gfx;

void drawSprite(int x, int y, int spriteNum)
{
	//just testing with this procedure
	//to do: ASM function that takes a pointer to the sprite and copies pixels a row at a time (not per pixel)
	int _x = 0;
	int _y = 0;
	switch (spriteNum)
	{
	case 0:
		for (int ypos = 0; ypos < 32; ypos++)
		{
			for (int xpos = 0; xpos < 32; xpos++)
			{
				DrawPixel(xpos + x, ypos + y, (int)met1[ypos][xpos]);	
				_y++;
			}
			_x++;
		}
		break;
	case 1:
		for (int ypos = 0; ypos < 32; ypos++)
		{
			for (int xpos = 0; xpos < 32; xpos++)
			{
				DrawPixel(xpos + x, ypos + y, (int)met2[ypos][xpos]);
				_y++;
			}
			_x++;
		}
		break;
	case 2:
		for (int ypos = 0; ypos < 32; ypos++)
		{
			for (int xpos = 0; xpos < 32; xpos++)
			{
				DrawPixel(xpos + x, ypos + y, (int)met3[ypos][xpos]);
				_y++;
			}
			_x++;
		}
		break;

	default:
		//do nothing
		break;
	}
}
void clearSpriteTrail(int x, int y)
{
	gfx.DrawRectangleFilledASM(x, y, x + 12, y + 31, 0x00000);		//if moving left to right, only need to clean up the portion not refreshed
}
void clearSprite(int x, int y)
{
	gfx.DrawRectangleFilledASM(x, y, x + 31, y + 31, 0x00000);		//if moving left to right, only need to clean up the portion not refreshed
}
void animateSprite()
{
	int xmove = 6;
	int yloc = 400;
	int spriteNum = 0;

	for (int x = 50; x < 600; x += xmove)
	{
		clearSpriteTrail(x - 12, yloc);	//clear previous sprite
		drawSprite(x, yloc, spriteNum);
		gfx.SwapFrame();
		spriteNum++;
		if (spriteNum > 2) { spriteNum = 0; }
	}
	clearSprite(590, yloc);		//clear last sprite
	gfx.SwapFrame();
	clearSprite(595, yloc);		//clear last sprite
	gfx.SwapFrame();
}

void test_int()
{
	gfx.ClearScreen();
	for (uint16_t y = 0; y < TEST_HEIGTH; y++)
	{
		for (uint16_t x = 0; x < TEST_WIDTH; x++)
		{
			uint16_t color = (x + y) * 58;
			union REGPACK regs;
			memset(&regs, 0, sizeof(union REGPACK));
			regs.w.ax = 0xb300;
			regs.w.bx = color & 0x0000ffff;	// 16-bit color
			regs.w.cx = x;					// column #
			regs.w.dx = y;					// row #
			intr(0x10, &regs);
		}
	}
}
void test_asm_c()
{
	gfx.ClearScreen();
	for (uint16_t y = 0; y < TEST_HEIGTH; y++)
	{
		for (uint16_t x = 0; x < TEST_WIDTH; x++)
		{
			uint16_t color = (x + y) * 58;
			vga_draw_pixel(x, y, color);
		}
	}
}
void test_asm_watcomc()
{
	gfx.ClearScreen();
	for (uint16_t y = 0; y < TEST_HEIGTH; y++)
	{
		for (uint16_t x = 0; x < TEST_WIDTH; x++)
		{
			uint16_t color = (x + y) * 58;
			vga_draw_pixel_fast(color, x, y);
		}
	}
}
void test_asm_watcomc_nocalls()
{
	gfx.ClearScreen();
	for (uint16_t y = 0; y < TEST_HEIGTH; y++)
	{
		for (uint16_t x = 0; x < TEST_WIDTH; x++)
		{
			uint16_t color = (x + y) * 58;
			vga_draw_pixel_faster(x, y, color);
		}
	}
}
void test_direct_cpp()
{
	gfx.ClearScreen();
	for (uint16_t y = 0; y < TEST_HEIGTH; y++)
	{
		for (uint16_t x = 0; x < TEST_WIDTH; x++)
		{
			gfx.SetSegment(y);
			uint16_t color = (x + y) * 58;
			uintptr_t addr = VIDEO_ADDRESS_START + (BYTES_PER_ROW * (y)) + (BYTES_PER_PIXEL * x);
			write_word_far(addr, color);
		}
	}
}

void RunRenderSpeedTest()
{
	clock_t start_time1, end_time1, start_time2, end_time2, start_time3, end_time3, start_time4, end_time4, start_time5, end_time5;

	cout << "Starting benchmark...\n";

	animateSprite();

	start_time1 = clock();
	test_int();
	gfx.SwapFrame();
	end_time1 = clock();

	start_time2 = clock();
	test_asm_c();
	gfx.SwapFrame();
	end_time2 = clock();

	start_time3 = clock();
	test_asm_watcomc();
	gfx.SwapFrame();
	end_time3 = clock();

	start_time4 = clock();
	test_asm_watcomc_nocalls();
	gfx.SwapFrame();
	end_time4 = clock();

	start_time5 = clock();
	test_direct_cpp();
	gfx.SwapFrame();
	end_time5 = clock();

	gfx.ClearScreen();
	gfx.SwapFrame();
	gfx.ClearScreen();

	cout << "results...\n\n";
	cout << "interrupt                              >>>   duration:  " << end_time1 - start_time1 << " ms\n";
	cout << "asm c calling conv                     >>>   duration:  " << end_time2 - start_time2 << " ms\n";
	cout << "asm watc calling conv                  >>>   duration:  " << end_time3 - start_time3 << " ms\n";
	cout << "asm watc calling conv no subcalls      >>>   duration:  " << end_time4 - start_time4 << " ms\n";
	cout << "c++ direct                             >>>   duration:  " << end_time5 - start_time5 << " ms\n\n";

	gfx.DisableKeyboardCursor();

	uint16_t startY = 0;

	// ***** rectangles *****
	//startY += 80;
	//for (int i = 20; i < WIDTH_PIXELS; i += 10)
	//{
	//	gfx.DrawRectangle(i, startY, i + 5, startY + i / 10, i * 100);
	//	gfx.SwapFrame();
	//	gfx.DrawRectangle(i, startY, i + 5, startY + i / 10, i * 100);
	//}

	// ***** rectangles ASM *****
	startY += 80;
	for (int i = 20; i < WIDTH_PIXELS; i += 10)
	{
		gfx.DrawRectangleASM(i, startY, i + 5, startY + i / 10, i * 100);
		gfx.SwapFrame();
		gfx.DrawRectangleASM(i, startY, i + 5, startY + i / 10, i * 100);
	}

	// ***** filled rectangles *****
	//startY += 30;
	//for (int i = 20; i < WIDTH_PIXELS; i += 10)
	//{
	//	gfx.DrawRectangleFilled(i, startY, i + 5, startY + i / 10, i * 100);
	//	gfx.SwapFrame();
	//	gfx.DrawRectangleFilled(i, startY, i + 5, startY + i / 10, i * 100);
	//}

	// ***** filled rectangles ASM *****
	startY += 30;
	for (int i = 20; i < WIDTH_PIXELS; i += 10)
	{
		gfx.DrawRectangleFilledASM(i, startY, i + 5, startY + i / 10, i * 50);
		gfx.SwapFrame();
		gfx.DrawRectangleFilledASM(i, startY, i + 5, startY + i / 10, i * 50);
	}

	// ***** circles *****
	//startY += 60;
	//for (int i = 20; i < WIDTH_PIXELS; i += 10)
	//{
	//	gfx.DrawCircle(i, startY, i / 20, i * 50);
	//	gfx.SwapFrame();
	//	gfx.DrawCircle(i, startY, i / 20, i * 50);
	//}

	// ***** circles ASM *****
	startY += 60;
	for (int i = 20; i < WIDTH_PIXELS; i += 10)
	{
		gfx.DrawCircleASM(i, startY, i / 20, i * 50);
		gfx.SwapFrame();
		gfx.DrawCircleASM(i, startY, i / 20, i * 50);
	}

	// ***** filled circles *****
	//startY += 30;
	//for (int i = 20; i < WIDTH_PIXELS; i += 20)
	//{
	//	gfx.DrawCircleFilled(i, startY, i / 20, i * 2000);
	//	gfx.SwapFrame();
	//	gfx.DrawCircleFilled(i, startY, i / 20, i * 2000);
	//}

	// ***** filled circles ASM *****
	startY += 30;
	for (int i = 20; i < WIDTH_PIXELS; i += 20)
	{
		gfx.DrawCircleFilledASM(i, startY, i / 20, i * 50);
		gfx.SwapFrame();
		gfx.DrawCircleFilledASM(i, startY, i / 20, i * 50);
	}

	// **** ellipses *****
	startY += 40;
	for (int i = 20; i < WIDTH_PIXELS; i += 20)
	{
		gfx.DrawEllipse(i, startY, i / 30, i / 20, i * 50);
		gfx.SwapFrame();
		gfx.DrawEllipse(i, startY, i / 30, i / 20, i * 50);
	}

	// **** lines *****
	for (int i = 5; i < WIDTH_PIXELS; i += 10)
	{
		gfx.DrawLineBres(i, 340, WIDTH_PIXELS - i, 440, i * 50);
		gfx.SwapFrame();
		gfx.DrawLineBres(i, 340, WIDTH_PIXELS - i, 440, i * 50);
	}

	gfx.SetCursorPosition(0, 450);
}
void LoadTestImage()
{
	const char* fileToOpen = "c:\\rehsd\\frog7.img";
	printf("Loading image %s...\n", fileToOpen);
	gfx.LoadImageToScreen(fileToOpen);
	gfx.ClearScreen();
}

int main() {
	char selection;
	//Display menu
	printf("Loading...\n");
	gfx.ClearScreen();
	do
	{
		printf("Welcome to the test utilty for graphics!\n\n");
		printf("1) Basic Rendering / Speed Test\n");
		printf("2) Load Test Image\n");
		printf("Q) Quit\n");
		printf("\nSelection: ");
		fflush(stdout);
		do
		{
		} while (!IsKeyPressed());
		cin >> selection;
		switch (selection)
		{
		case '1':
			RunRenderSpeedTest();
			break;
		case '2':
			LoadTestImage();
			break;
		case 'q':
			//do nothing, will fall out of do loop
			break;
		case 'Q':
			//do nothing, will fall out of do loop
			break;
		default:
			printf("Invalid Selection\n");
		}
	} while (selection != 'Q' || selection == 'q');
	


	return 0;
}